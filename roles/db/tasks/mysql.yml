---
- name: MySQL - Get MariaDB key
  apt_key: url=http://keyserver.ubuntu.com/pks/lookup?op=get&search=0xCBCB082A1BB943DB
  tags:
    - creates

- name: MySQL - Add MariaDB repository
  apt_repository: repo='deb http://mirror.jmu.edu/pub/mariadb/repo/5.5/debian wheezy main' state=present
  tags:
    - creates

- name: MySQL - Install MariaDB
  apt: name={{ item }} state=present update_cache=true
  with_items:
    - mariadb-client
    - mariadb-server
    - python-mysqldb
  tags:
    - packages

- name: MySQL - Create a new DBMS root user
  mysql_user: name={{ mysql.database.root_login }} password={{ root_password }} priv=*.*:ALL,GRANT state=present host=localhost
  ignore_errors: yes
  tags:
    - creates

- name: MySQL - Create databases
  mysql_db: name={{ mysql.database.schemas_prefix + item }} state=present login_user={{ mysql.database.root_login }} login_password={{ root_password }} encoding=utf8
  with_items: mysql.database.schemas
  tags:
    - creates

- name: Scripts - Copy database temporary file
  copy: src={{ mysql.database.schemas_prefix + item }}.sql dest=/tmp/{{ mysql.database.schemas_prefix + item }}.sql
  with_items: mysql.database.schemas
  when: env == 'prod'
  tags:
    - creates

- name: MySQL - Import database
  mysql_db: name={{ mysql.database.schemas_prefix + item }} state=import target=/tmp/{{ mysql.database.schemas_prefix + item }}.sql login_user={{ mysql.database.root_login }} login_password={{ root_password }} encoding=utf8
  with_items: mysql.database.schemas
  when: env == 'prod'
  tags:
    - creates

- name: Scripts - Remove database temporary file
  file: dest=/tmp/{{ mysql.database.schemas_prefix + item }}.sql state=absent
  with_items: mysql.database.schemas
  when: env == 'prod'
  tags:
    - creates

- name: MySQL - Create application accounts
  mysql_user: name={{mysql.database.login}} password={{ database_password }} priv={{mysql.database.schemas_prefix + "%.*:INSERT,SELECT,UPDATE,DELETE"}} state=present host={{item}} login_user={{mysql.database.root_login}} login_password={{root_password}}
  with_items: groups['webservers']
  when: groups['webservers'][0] != groups['dbservers'][0]
  tags:
    - dbuser
    - creates

- name: MySQL - Create local accounts
  mysql_user: name={{mysql.database.login}} password={{ database_password }} priv={{mysql.database.schemas_prefix + "%.*:INSERT,SELECT,UPDATE,DELETE"}} state=present host=localhost login_user={{mysql.database.root_login}} login_password={{root_password}}
  when: groups['webservers'][0] == groups['dbservers'][0]
  tags:
    - dbuser
    - creates

- name: MySQL - Remove default root account
  mysql_user: name=root state=absent host={{item}} login_user={{ mysql.database.root_login }} login_password={{ root_password }}
  with_items:
    - localhost
    - $ansible_hostname
    - 127.0.0.1
    - ::1
  tags:
    - creates
  notify:
  - restart mysql

- name: MySQL - Save default configuration file
  command: cp -n /etc/mysql/my.cnf /etc/mysql/my.cnf.bak
  tags:
    - creates

- name: MySQL - Install configuration file
  template: src=etc/mysql/my.cnf.j2 dest=/etc/mysql/my.cnf owner=root mode=0644
  notify:
  - restart mysql
