---
- name: SSL - Install ssl | update repositories
  apt: update_cache=yes upgrade=safe state=latest

- name: SSL - Install ssl
  apt: name={{ item }} state=present update_cache=yes force=yes
  with_items:
    - openssl
    - openssl-blacklist
    - openssl-blacklist-extra

- name: SSL - Create sql sqlcert group
  group: name=sqlcert state=present system=yes

- name: SSL - Add mysql user to the sql cert group
  user: name=mysql state=present system=yes createhome=no groups=sqlcert
  when: inventory_hostname in groups['db']

- name: SSL - Add www-data user to the sql cert group
  user: name=www-data state=present system=yes createhome=no groups=sqlcert
  when: inventory_hostname in groups['web']

- name: SSL - Make sure /etc/ssl/private exists and is explorable
  file: state=directory path=/etc/ssl/private mode=744 owner=root group=root

- name: SSL - Make sure /etc/ssl/certs exists and is explorable
  file: state=directory path=/etc/ssl/certs mode=744 owner=root group=root

- name: SSL - Create sql temporary temporary local certificates
  local_action: file state=directory path=files/ssl/temps mode=777
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql CA certificate key
  local_action: shell openssl genrsa 2048 > ./files/ssl/temps/ca-key.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql CA certificate
  local_action: shell openssl req -new -x509 -nodes -subj "/C={{ ssl.company.country_code }}/ST={{ ssl.company.country }}/L={{ ssl.company.location }}/O={{ ssl.company.name }}/CN=ca.{{ mariadb.domain }}" -days 3600 -key ./files/ssl/temps/ca-key.pem -out ./files/ssl/temps/ca.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql server certificate request
  local_action: shell openssl req -newkey rsa:2048 -days 3600 -nodes -subj "/C={{ ssl.company.country_code }}/ST={{ ssl.company.country }}/L={{ ssl.company.location }}/O=server.{{ ssl.company.name }}/CN={{ mariadb.domain }}" -keyout ./files/ssl/temps/server-key.pem -out ./files/ssl/temps/server-req.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql server certificate key
  local_action: shell openssl rsa -in ./files/ssl/temps/server-key.pem -out ./files/ssl/temps/server-key.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql server certificate
  local_action: shell openssl x509 -req -in ./files/ssl/temps/server-req.pem -days 3600 -CA ./files/ssl/temps/ca.pem -CAkey ./files/ssl/temps/ca-key.pem -set_serial 01 -out ./files/ssl/temps/server-cert.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql client certificate request
  local_action: shell openssl req -newkey rsa:2048 -days 3600 -nodes -subj "/C={{ ssl.company.country_code }}/ST={{ ssl.company.country }}/L={{ ssl.company.location }}/O={{ ssl.company.name }}/CN=client.{{ mariadb.domain }}" -keyout ./files/ssl/temps/client-key.pem -out ./files/ssl/temps/client-req.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql client certificate key
  local_action: shell openssl rsa -in ./files/ssl/temps/client-key.pem -out ./files/ssl/temps/client-key.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Create sql client certificate
  local_action: shell openssl x509 -req -in ./files/ssl/temps/client-req.pem -days 3600 -CA ./files/ssl/temps/ca.pem -CAkey ./files/ssl/temps/ca-key.pem -set_serial 01 -out ./files/ssl/temps/client-cert.pem
  sudo: no
  run_once: true
  tags:
    - renew

- name: SSL - Remove temporary temporary local certificates
  file: state=absent path=files/ssl/temp
  run_once: true
  sudo: no
  delegate_to: 127.0.0.1
  tags:
    - renew

- name: SSL - Verify certificates | check
  local_action: shell openssl verify -CAfile ./files/ssl/temps/ca.pem ./files/ssl/temps/server-cert.pem ./files/ssl/temps/client-cert.pem
  run_once: true
  sudo: no
  register: check_ssl

- name: SSL - Verify certificates
  fail: msg="Error while checking SSL certificates. {{ check_ssl.stdout}}"
  when: "check_ssl.stdout.find('./files/ssl/temps/server-cert.pem: OK\n./files/ssl/temps/client-cert.pem: OK') == -1"

- name: SSL - Set sql servers CA certificate
  copy: src=files/ssl/temps/ca.pem dest=/etc/ssl/certs/sql-ca.pem owner=mysql group=sqlcert mode=0644 force=yes
  when: inventory_hostname in groups['db']
  notify:
    - restart mysql
  tags:
    - renew

- name: SSL - Set MySQL servers certificate
  copy: src=files/ssl/temps/server-cert.pem dest=/etc/ssl/certs/sql-server-cert.pem owner=mysql group=sqlcert mode=0644 force=yes
  when: inventory_hostname in groups['db']
  notify:
    - restart mysql
  tags:
    - renew

- name: SSL - Set MySQL servers private key
  copy: src=files/ssl/temps/server-key.pem dest=/etc/ssl/private/sql-server-key.pem owner=mysql group=sqlcert mode=0640 force=yes
  when: inventory_hostname in groups['db']
  notify:
    - restart mysql
  tags:
    - renew

- name: SSL - Set MySQL clients CA certificate
  copy: src=files/ssl/temps/ca.pem dest=/etc/ssl/certs/sql-ca.pem owner=mysql group=sqlcert mode=0644 force=yes
  when: inventory_hostname in groups['web']
  tags:
    - renew

- name: SSL - Set MySQL clients certificate
  copy: src=files/ssl/temps/client-cert.pem dest=/etc/ssl/certs/sql-client-cert.pem owner=mysql group=sqlcert mode=0644 force=yes
  when: inventory_hostname in groups['web']
  tags:
    - renew

- name: SSL - Set MySQL clients private key
  copy: src=files/ssl/temps/client-key.pem dest=/etc/ssl/private/sql-client-key.pem owner=mysql group=sqlcert mode=0640 force=yes
  when: inventory_hostname in groups['web']
  tags:
    - renew

- name: SSL - Remove temporary temporary local certificates
  local_action: file state=absent path=files/ssl/temps
  sudo: no
  run_once: true
  tags:
    - renew